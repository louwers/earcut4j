name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 3.0.1)'
        required: true
        type: string
      dry_run:
        description: 'Dry run (skip actual publishing)'
        required: false
        type: boolean
        default: false

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Initialize submodules
      run: git submodule update --init --recursive
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'
    
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Make gradlew executable
      run: chmod +x ./gradlew
    
    - name: Run tests
      run: ./gradlew clean test
    
    - name: Update version in build.gradle.kts
      if: ${{ !inputs.dry_run }}
      run: |
        sed -i "s/coordinates(\"nl.bartlouwers\", \"earcut4j\", \".*\")/coordinates(\"nl.bartlouwers\", \"earcut4j\", \"${{ inputs.version }}\")/" build.gradle.kts
    
    - name: Publish to Maven Central
      if: ${{ !inputs.dry_run }}
      run: ./gradlew publishToMavenCentral
      env:
        SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
        SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
        SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
        SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
    
    - name: Create Git Tag
      if: ${{ !inputs.dry_run }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add build.gradle.kts
        git commit -m "Release version ${{ inputs.version }}" || exit 0
        git tag -a "v${{ inputs.version }}" -m "Release version ${{ inputs.version }}"
        git push origin "v${{ inputs.version }}"
    
    - name: Dry run summary
      if: ${{ inputs.dry_run }}
      run: |
        echo "Dry run completed successfully!"
        echo "Version that would be released: ${{ inputs.version }}"
        echo "To perform actual release, run this workflow again with dry_run set to false"